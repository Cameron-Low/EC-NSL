require import AllCore FMap FSet.

type id, msg, istate, rstate, key, pskey.

op dkey: key distr.
op dpskey: pskey distr.

(* Represents the role of an instance in the protocol *)
type role = [
  Initiator
| Responder
].

type trace = (id * msg) * msg * msg.

(* Represents an instance state in the protocol *)
type instance_state = [
| IPending of istate & (id * msg)
| RPending of rstate & (id * msg) & msg
| Accepted of trace & key
| Observed of trace & key
| Aborted
].

(* Return the trace from an accepted state *)
op get_trace s : trace option =
with s = Accepted t _   => Some t
with s = Observed t _   => Some t
with s = IPending _ _   => None
with s = RPending _ _ _ => None
with s = Aborted        => None.

(* Decide if an instance has been revelaed *)
op is_observed s : bool =
with s = Observed _ _   => true
with s = Accepted _ _   => false
with s = IPending _ _   => false
with s = RPending _ _ _ => false
with s = Aborted        => false.

(* Get all trace-sharing instances *)
op get_ts_instances t (fmap : ('a, 'b * _) fmap) =
  fdom (filter (fun _ x=> (get_trace \o snd) x = Some t) fmap).

(* Get all partners of the given instance *)
op get_partners ai t r (fmap: (id * int, role * instance_state) fmap) =
fdom (
  filter
  (fun bj (val: role * instance_state) =>
        bj <> ai            (* We cannot be our own partner *)
    /\ get_trace val.`2 = t (* Partners share the same trace *)
    /\ val.`1 <> r          (* Partners must have opposite roles *)
    /\ t <> None            (* We must be accepted *)
  )
  fmap
).

op get_observed_partners ai  (fmap : (id * int, role * instance_state) fmap) =
  filter
    (fun bj => oapp (is_observed \o snd) false fmap.[bj])
    (get_partners ai (get_trace (oget fmap.[ai]).`2) (oget fmap.[ai]).`1 fmap).


(********************************************************************************)
(* Defining AKE schemes *)

module type AKE_Scheme = {
  proc msg1(a: id, b: id, psk: pskey) : (id * msg) * istate
  proc msg2(b: id, m1: id * msg, psk: pskey) : (msg * rstate) option
  proc msg3(a: id, s: istate, m2: msg) : (msg * key) option
  proc fin(b: id, s: rstate, m3: msg) : key option
}.


(********************************************************************************)
(* WAKE package and games *)

module type GWAKE_out = {
  (* Public key generation *)
  proc gen_pskey(a: id, b: id) : unit

  (* Active man-in-the-middle *)
  proc send_msg1(a: id, i: int, b:  id) : msg option
  proc send_msg2(b: id, j: int, m1: id * msg) : msg option
  proc send_msg3(a: id, i: int, m2: msg) : msg option
  proc send_fin(b: id, j: int, m3: msg) : unit option

  (* Get a session key *)
  proc rev_skey(a: id, i: int) : key option
  proc test(a: id, i: int) : key option
}.

module type GWAKE_out_i = {
  include GWAKE_out 

  proc init_mem() : unit
}.

module GWAKEb (P : AKE_Scheme) = {
  var state_map: (id * int, role * instance_state) fmap
  var psk_map: (id * id, pskey) fmap

  proc init_mem() : unit = {
    state_map <- empty;
    psk_map <- empty;
  }

  proc gen_pskey(a: id, b: id) : unit = {
    var k;
    if ((a, b) \notin psk_map) {
      k <$ dpskey;
      psk_map.[(a, b)] <- k;
    }
  }

  proc send_msg1(a: id, i: int, b: id) : msg option = {
    var psk, st, m;
    var mo <- None;

    if ((a, i) \notin state_map /\ (a, b) \in psk_map) {
      psk <- oget psk_map.[(a, b)];
      (m, st) <@ P.msg1(a, b, psk);
      mo <- Some m.`2;
      state_map.[(a, i)] <- (Initiator, IPending st m);
    }
    return mo;
  }


  proc send_msg2(b: id, j: int, m1: id * msg) : msg option = {
    var a, m2, s, resp, role, st, psk;
    var m <- None;

    a <- m1.`1;
    (role, st) <- oget state_map.[(b, j)];
    if ((b, j) \notin state_map /\ (a, b) \in psk_map) {
      psk <- oget psk_map.[(a, b)];
      resp <@ P.msg2(b, m1, psk);
      match resp with
      | None => state_map.[(b, j)] <- (Responder, Aborted);
      | Some val => {
        (m2, s) <- val;
        state_map.[(b, j)] <- (Responder, RPending s m1 m2);
        m <- Some m2;
      }
      end;
    }
    return m;
  }

  proc send_msg3(a: id, i: int, m2: msg) : msg option = {
    var m3, key, role, st, resp;
    var r <- None;

    if ((a, i) \in state_map) {
      (role, st) <- oget state_map.[(a, i)];
      if (st is IPending s m1) {
        resp <@ P.msg3(a, s, m2);
        match resp with
        | None => state_map.[(a, i)] <- (Initiator, Aborted);
        | Some val => {
          (m3, key) <- val;
          state_map.[(a, i)] <- (Initiator, Accepted (m1, m2, m3) key);
          r <- Some m3;
        }
        end;
      }
    }
    return r;
  }

  proc send_fin(b: id, j: int, m3: msg) : unit option = {
    var role, st, resp;
    var r <- None;

    if ((b, j) \in state_map) {
      (role, st) <- oget state_map.[(b, j)];
      if (st is RPending s m1 m2) {
        resp <@ P.fin(b, s, m3);
        match resp with
        | None => state_map.[(b, j)] <- (Responder, Aborted);
        | Some key => {
          state_map.[(b, j)] <- (Responder, Accepted (m1, m2, m3) key);
          r <- Some ();
        }
        end;
      }
    }
    return r;
  }

  proc rev_skey(a: id, i: int) : key option = {
    var role, st, ps, k;
    var ko <- None;

    if ((a, i) \in state_map) {
      (role, st) <- oget state_map.[(a, i)];
      match st with
      | Accepted trace k' => {
        (* Get partners *)
        ps <- get_partners (a, i) (Some trace) role state_map;
        if (card ps <= 1) {
          ps <- get_observed_partners (a, i) state_map;
          (* If we have no observed partners then, we can test *)
          if (card ps = 0) {
            k <- k';
            ko <- Some k;
            state_map.[(a, i)] <- (role, Observed trace k);
          }
        }
      }
      | Observed _ _   => { }
      | IPending _ _   => { }
      | RPending _ _ _ => { }
      | Aborted        => { }
      end;
    }
    return ko;
  }
}.

module GWAKE0 (P : AKE_Scheme) : GWAKE_out_i = {
  include var GWAKEb(P)

  proc test = GWAKEb(P).rev_skey
}.

module GWAKE1 (P : AKE_Scheme) : GWAKE_out_i = {
  include var GWAKEb(P)

  proc test(a: id, i: int) : key option = {
    var role, st, ps, k;
    var ko <- None;

    if ((a, i) \in state_map) {
      (role, st) <- oget state_map.[(a, i)];
      match st with
      | Accepted trace k' => {
        (* Get partners *)
        ps <- get_partners (a, i) (Some trace) role state_map;
        if (card ps <= 1) {
          ps <- get_observed_partners (a, i) state_map;
          (* If we have no observed partners then, we can test *)
          if (card ps = 0) {
            k <$ dkey;
            ko <- Some k;
            state_map.[(a, i)] <- (role, Observed trace k);
          }
        }
      }
      | Observed _ _   => { }
      | IPending _ _   => { }
      | RPending _ _ _ => { }
      | Aborted        => { }
      end;
    }
    return ko;
  }
}.


(********************************************************************************)
(* Adversary and Experiment *)

module type A_GWAKE (GW : GWAKE_out) = {
  proc run() : bool
}.

module E_GWAKE (O : GWAKE_out_i) (A : A_GWAKE) = {
  proc run() : bool = {
    var b : bool;

    O.init_mem();
    
    b <@ A(O).run();
    
    return b;
  }
}.
