require import Distr FMap.

type key, data, ctxt, ptxt.
type handle.

op dkey : key distr.
op dctxt : ctxt distr.

op enc : key -> data -> ptxt -> ctxt distr.
op dec : key -> data -> ctxt -> ptxt option.

axiom correctness k ad p c:
   k \in dkey
=> c \in enc k ad p
=> dec k ad c = Some p.

module type GAEAD_out = {
  proc gen(h: handle) : unit
  proc ex(h: handle) : bool
  proc enc(h: handle, ad: data, p: ptxt) : ctxt option
  proc dec(h: handle, ad: data, c: ctxt) : ptxt option
}.

module type GAEAD_out_i = {
  include GAEAD_out
  proc init_mem() : unit
}.

module GAEADb = {
  var psk_map : (handle, key) fmap

  proc gen(h: handle) : unit = {
    var k;
    if (h \notin psk_map) {
      k <$ dkey;
      psk_map.[h] <- k;
    }
  }
  
  proc ex(h: handle) : bool = {
    return h \in psk_map;
  }
}.

module GAEAD0 : GAEAD_out_i = {
  include var GAEADb
  
  proc init_mem() = {
    psk_map <- empty;
  }

  proc enc(h: handle, ad: data, p: ptxt) : ctxt option = {
    var c;
    var r <- None;

    if (psk_map.[h] is Some k) {
      c <$ enc k ad p;
      r <- Some c;
    }
    return r;
  }

  proc dec(h: handle, ad: data, c: ctxt) : ptxt option = {
    var p <- None;

    if (psk_map.[h] is Some k) {
      p <- dec k ad c;
    }
    return p;
  }
}.

module GAEAD1 : GAEAD_out_i = {
  include var GAEADb
  var ctxts : (handle * data * ctxt, ptxt) fmap

  proc init_mem() = {
    psk_map <- empty;
    ctxts <- empty;
  }

  proc enc(h: handle, ad: data, p : ptxt) : ctxt option = {
    var c;
    var r <- None;

    if (h \in psk_map) {
      c <$ dctxt;
      ctxts.[(h, ad, c)] <- p;
      r <- Some c;
    }
    return r;
  }

  proc dec(h: handle, ad: data, c: ctxt) : ptxt option = {
    var p <- None;

    if (h \in psk_map) {
      p <- ctxts.[h, ad, c];
    }
    return p;
  }
}.


(********************************************************************************)
(* Adversary and Experiment *)
module type A_GAEAD (GA : GAEAD_out) = {
  proc run() : bool
}.

module E_GAEAD (O : GAEAD_out_i) (A : A_GAEAD) = {
  proc run() : bool = {
    var b : bool;

    O.init_mem();
    
    b <@ A(O).run();
    
    return b;
  }
}.
