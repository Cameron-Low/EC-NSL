require import FMap.

type handle, key, D, R.

op dkey : key distr.
op dR : D -> R distr.

op f : key -> D -> R.

module type GPRF_out = {
  proc gen(_: handle) : unit
  proc f(_: handle * D) : R option
}.

module type GPRF_out_i = {
  proc init_mem() : unit
  include GPRF_out
}.

module PRFb = {
  var prfkey_map : (handle, key) fmap

  proc gen(h) : unit = {
    var k;

    if (h \notin prfkey_map) {
      k <$ dkey;
      prfkey_map.[h] <- k;
    }
  }
}.

module PRF0 : GPRF_out_i = {
  include var PRFb

  proc init_mem() = {
    prfkey_map <- empty;
  }
  
  proc f(h, x) = {
    var r <- None;
    if (prfkey_map.[h] is Some k) {
      r <- Some (f k x);
    }
    return r;
  }
}.

module PRF1 : GPRF_out_i = {
  include var PRFb

  var cache : (handle * D, R) fmap

  proc init_mem() = {
    prfkey_map <- empty;
    cache <- empty;
  }

  proc f(h, x) = {
    var y;
    var r <- None;
    if (prfkey_map.[h] is Some k) {
      y <$ dR x;
      if ((h, x) \notin cache) {
        cache.[(h, x)] <- y;
      }
      r <- cache.[(h, x)];
    }
    return r;
  }
}.

(********************************************************************************)
(* Adversary and Experiment *)
module type A_GPRF (GA : GPRF_out) = {
  proc run() : bool
}.

module E_GPRF (O : GPRF_out_i) (A : A_GPRF) = {
  proc run() : bool = {
    var b : bool;

    O.init_mem();
    
    b <@ A(O).run();
    
    return b;
  }
}.
